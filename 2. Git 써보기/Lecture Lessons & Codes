repository와 commit

Git 의 기본 개념
1. 레포지토리
2. 커밋

repository
우리말로 저장소라는 뜻이다 우리가 어떤 프로그램을 만드는 프로젝트를 한다고 가정하면 그럼 먼저 그 프로젝트에 필요한 것들을 담기위한 디렉토리를 만든다 그리고 프로젝트와 관련된 디렉토리나 파일들을
모두 그 디렉토리 안에 담게 된다 이 디렉토리를 프로젝트 디렉토리라고 한다 이 때 git 으로 프로젝트 디렉토리의 버전으로 관리하기 시작하면 원하는 시점마다 그 디렉토리 안에 어떤것이 있는지 그것들의 내용이
어떻게 변해가는지 기록할 수 있다 git이 이런 정보를 기록하는 곳을 레포지토리라고 한다 그러니까 레포지토리 안에는 프로젝트를 위해 만든 디렉토리의 초창기 모습부터 최근 모습까지 버전별로 담겨있다
git을 쓰면 프로젝트 디렉토리 안에 .git 이라고 하는 디렉토리가 만들어지는데 (숨겨짐) 바로 이 .git 디렉토리가 레포지토리이다 어떤 사람들은 프로젝트 디렉토리 자체를 레포지토리라고도 하는데 정확하게는
프로젝트의 변경사항들이 저장되어있는 .git 디렉토리가 레포지토리이다 

commit
프로젝트 디렉토리 안에서 작업을 하다보면 지금의 모습이 하나의 버전으로 남겨지면 좋겠다는 생각이 들 때가 있다 이 때 프로젝트 디렉토리의 모습을 하나의 버전으로 남기는 동작을 커밋한다라고 한다 
커밋하면 커밋하는 당시의 프로젝트 디렉토리의 모습이 마치 사진처럼 레포지토리에 저장된다 이 때 이 고정된 결과물 자체도 커밋이라고 한다 레포지토리에 저장된 커밋을 나중에 참조하면 과거의 프로젝트
디렉토리의 모습을 볼 수 있게 되는데 이런 커밋을 통해서 버전 관리를 할 수 있게 된다 

정리하자면 프로젝트 디렉토리의 특정 모습을 하나의 버전으로 남기는 행위 그리고 그 결과물을 커밋이라고 하고 이 커밋이 저장되는 곳을 레포지토리라고 한다 
---------------------------------------------------------------------------------------------------------------------------------------------

repository 만들기 

이제부터 프로젝트 하나를 시작해보자 수학 계산기 프로그램을 만들어볼거다 그리고 이 프로젝트를 진행하면서 git을 사용할거다 일단 프로젝트를 위해 MathTool이란 디렉토리를 만들거다 -> mkdir MathTool
이제 이 디렉토리 안에서 프로젝트에 필요한 각종 파일과 자식 디렉토리를 만들것이다 그러면 이 MathTool 디렉토리가 프로젝트 디렉토리가 되는것이다 그리고 git으로 이 프로젝트 디렉토리의 버전관리를 할것이다 
근데 그러려면 어떤 설정이 필요하다 프로젝트 디렉토리로 가서 git init 이라고 치고 엔터를 누른다 
->
hint: Using 'master' as the name for the initial branch. This default branch name
hint: is subject to change. To configure the initial branch name to use in all
hint: of your new repositories, which will suppress this warning, call:
hint: 
hint: 	git config --global init.defaultBranch <name>
hint: 
hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and
hint: 'development'. The just-created branch can be renamed via this command:
hint: 
hint: 	git branch -m <name>
Initialized empty Git repository in /Users/jutlo/code_it_git/.git/
이렇게 뜬다

여기서 git은 우리가 git으로 어떤 작업을 할 때마다 써야하는 커맨드이고 이 git이라는 단어 뒤애 어떤 커맨드를 붙이느냐에 따라 하게 되는 작업이 달라진다 지금은 이렇게 git init이라고 했는데 
이렇게 하면 위에 처럼 Initialized empty Git repository in /Users/jutlo/code_it_git/.git/ 이렇게 결과가 출력되는데 이 문장은 비어있는 레포지토리를 생성했다는 의미이다 
실재로 어떤 일이 생겼는지 확인해보자 -> ls -al  -> .git 이라는 디렉토리가 생긴것을 확인할 수 있다 이게 바로 레포지토리이다 이 안으로 들어가보자 -> cd .git 
그리고 뭐가 들었는지 확인해보자 -> cd -al
->
total 24
drwxr-xr-x   9 jutlo  staff  288 Mar 29 10:52 .
drwxr-xr-x   4 jutlo  staff  128 Mar 29 10:52 ..
-rw-r--r--   1 jutlo  staff   23 Mar 29 10:52 HEAD
-rw-r--r--   1 jutlo  staff  137 Mar 29 10:52 config
-rw-r--r--   1 jutlo  staff   73 Mar 29 10:52 description
drwxr-xr-x  15 jutlo  staff  480 Mar 29 10:52 hooks
drwxr-xr-x   3 jutlo  staff   96 Mar 29 10:52 info
drwxr-xr-x   4 jutlo  staff  128 Mar 29 10:52 objects
drwxr-xr-x   4 jutlo  staff  128 Mar 29 10:52 refs

이게 다 무엇이냐? git은 프로젝트 디렉토리 안에 버전관리를 하기 위해서 자신만의 규칙을 가지고 복잡한 작업을 처리한다 여기 보이는 것들은 모두 그 작업을 하기위해 사용되는 것들이다 
git을 사용할 때 여기있는 것들이 각각 어떤 역할을 하는지 모두 알 필요는 없다 지금은 그냥 이 공간이 레포지토리이고 여기서 git 이 어떤 복잡한 작업을 하면서 버전관리를 한다는 것을 기억하자
------------------------------------------------------------------------------------------------------------------------------------------------

MathTool 디렉토리에 다음과 같은 calculator.py 를 저장해주자

def add(a, b):
  return a+b

def subtract(a, b):
  return a-b
  
그 다음은 우리가 만들 프로그램이 유료인지 무료인지 이런것들에 대한 정보를 담아준 license 파일을 만들것이다 일단 이 프로젝트의 결과물은 누구나 무료로 사용할 수 있도록 제공할거라서 Free 라고 적었다
프로젝트 디렉토리에 License 라고 하고 저장을 하자 (확장자가 없넹?) 자 이렇게 되면 비어있던 MathTool 디렉토리의 상태가 변했다 이 상태를 MathTool 디렉토리의 첫번째 버전으로 남기자 
이럴 때 commit을 쓴다 그런데 첫 커밋을 하기 전에 꼭 해줘야하는것이 있다 바로 git에게 내가 누구인지 알려주는것이다 커밋을 할 때는 그 커밋을 누가 했는지도 반드시 함께 기록해야하는데 그래야 나중에
누가 커밋했는지 알 수 있다 협업을 하다보면 누가 어떤 커밋을 했는지 구분하기 위해서다 git은 이것을 강제하고 있다 내가 누구인지 git 에게 알려주려면 내 이름과 이메일 주소를 설정하면 된다 
일단은 이렇게 써보자 
->
git config

여기서 config는 configure의 줄임말로 설정하다 구성하다 이런 의미이다 그리고 한 칸 띄고 내 이름을 설정하기 위해 user.name 이라고 쓴다 그리고 한 칸 띄고 "을 열고 내 이름을 쓰면 된다 
->
git config user.name "jutlo"

엔터를 치면 내 이름이 설정된다 email도 비숫하게 설정한다 -> git config user.email "juho.youn.work@gmail.com"

이제 내가 커밋을 하면 그 커밋에는 내 이름과 이메일도 같이 기록된다 자 이제 한번 커밋을 해보자
->
git commit 

commit은 우리말로 무언가를 행하다 기록하다 이런 뜻이다 여기에 몇가지 더 넣어야하는 사항들이 있다 커밋에는 이름과 이메일 외에 커밋에 대한 정보도 필요한데 어떤 변동 사항이 생겨 이런 커밋을 했는지 
그런 정보를 추가해줘야한다 이런 정보를 커밋 메세지라고 부른다 커밋 메세지를 남기려면 옵션이 필요하다 -m 이렇게 옵션을 주고 한칸 띄우고 "" 안에 커밋에 관한 정보를 쓰면 된다 이 내용을 잘 쓰는것이
굉장히 중요하다 우리는 방금 MathTool 디렉토리 안에 두개의 파일을 추가해줬다 그러니 이렇게 한번 기록해보자 
-> git commit -m "Create calculator.py and License"

그러면 이렇게 출력된다
->
On branch master

Initial commit

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	./

nothing added to commit but untracked files present (use "git add" to track)


에러 메세지처럼 뜨는데 마지막 줄을 보면 커밋을 하기 위해 add된게 하나도 없고 untracked 상태인 파일들이 존재한다는 문구가 보인다 
untracked 는 git에 의해서 아직 추적되지 않고 있다 이런 뜻인데 아직 git으로 뭔가를 해준적이 없어서 파일이 버전 관리 대상이 아닐 때 이런 상태를 untracked 라고 한다
그렇다면 add는 뭘까? 커밋에대해 중요한 사실이 하나 있는데 커밋을 하기 전에는 커밋을 할 파일들을 미리 지정해줘야한다 그러니까 파일을 새로 생성하거나 원래있던 파일의 내용들을 수정하고 나면 
그 파일들은 새로운 모습으로 커밋에 포함될거라고 지정을 하는건데 이 작업을 해야 그 후에 커밋을 할 수 있다 이런 사전 작업을 add라고 한다 
add 는 이렇게 쓴다
-> 
git add calculator.py 이렇게 하면 calculator.py 가 커밋에 반영될 파일로 지정됬다

License 파일도 추가해주자 -> git add License
자 이제 다시 커밋해보자 -> git commit -m "Create calculator.py and License"
->
[master (root-commit) 292b059] Create calculator.py and License
 2 files changed, 6 insertions(+)
 create mode 100644 MathTool/License
 create mode 100644 MathTool/calculator.py
 
 아까와는 좀 다르게 출력된다 이 출력 결과는 커밋이 되었다는 뜻이고 (그럼 아까거는 커밋이 안됬나보다) 그 결과를 보여준다 여기서 root-commit 이란 말은 이 커밋이 프로젝트의 첫번째 커밋이란 뜻이다
 그 옆에 작성한 커밋 메세지가 잘 보이고 2개의 파일이 변경됬다고 나오는데 우리가 파일 두개를 추가한 작업이 이렇게 나온다 그 옆에 6 insertions (+)는 6줄이 추가됬다는 의미인데 calculator.py
 의 5줄과 License 의 1줄이 추가된 결과이다 
 
 자 방금 배운 커밋의 주의 사항 세가지를 정리해보자 
 1. 처음으로 커밋하기 전 사용자의 이름과 이메일 주소 설정
 2. 커밋 메세지 남기기 (옵션 -m)
 3. 커밋할 파일을 git add 로 지정해주기
------------------------------------------------------------------------------------------------------------------------------

이전 영상에서 MathTool 디렉토리에 저장했던 calculator.py 파일에 대해 간단하게 설명해드릴게요.

사실 그 파일 안에 적었던 내용은 파이썬(python)이라고 하는 프로그래밍 언어로 작성한 코드입니다.

아직 파이썬(python)을 배우지 않은 분들은 코드를 이해하지 못하셨을 텐데요.

코드잇의 '프로그래밍 기초' 코스를 들으면 파이썬을 쉽게 배울 수 있습니다.

하지만 '프로그래밍 기초' 코스를 들을 시간이 없는 분들은 아래 내용만 참고하고 넘어가셔도 괜찮습니다.

자, calculator.py 파일의 코드를 볼까요?

def add(a, b):
  return a+b
    
def subtract(a, b):
  return a-b

일단 지금 파일 이름이 calculator.py인데요. 보통 파이썬 코드가 있는 파일은 이렇게 그 이름이 .py로 끝이 납니다. 지금 저는 계산기라는 뜻의 calculator라고 이름을 붙인 겁니다.

본격적으로 코드를 보면 위 내용 중

def add(a, b):
  return a+b

이 부분과

def subtract(a, b):
 return a-b

이 부분은 각각 함수입니다.

함수(function)라는 건 어떤 데이터를 받아서 그 데이터를 갖고 특정한 작업을 해주는 존재인데요. 

그러니까 지금 

def add(a, b):
  return a+b

이 부분은 a, b라는 이름으로 두 수를 받아서 그 두 수를 더한 값을 되돌려주는 add(더하다)라는 함수입니다.

이렇게 결과값을 되돌려주는 것을 파이썬 코드에서는 return이라고 표현합니다.

그리고

def subtract(a, b):
 return a-b

이 부분은 a, b라는 이름으로 두 수를 받아서 a에서 b를 뺀 값을 되돌려주는 subtract(빼다)함수입니다. 

지금 계산기니까 더하기, 빼기 함수를 추가한 겁니다. 이제 calculator.py 파일의 의미가 좀 이해되시죠?

참고로 이전 영상에서 calculator.py 파일 말고도 License 파일도 추가했었죠? 이런 내용을 적었었는데요.

Free

이 파일은 코드는 아니고 그냥 Free라고 하는 텍스트가 적혀있는 파일입니다. 현재 MathTool 디렉토리에서 만들려고 하는 프로그램이 무료라는 것을 나타내기 위해서 이런 텍스트 파일을 만든 겁니다.
--------------------------------------------------------------------------------------------------------------------------------------
간단한 코드라서 메모장으로 저장을 했습니다. 그래서 license 파일을 txt로 저장했는데 상관 없나요? 아니면 보통 파이썬으로 만든 코드라면 파이썬 확장자를 사용하나요?

강의에서는 별다른 확장자 없이 저장하던데

txt 파일도 괜찮습니다 :)
---------------------------------------------------------------------------------------------------------------------------------------

05. Git의 3가지 작업 영역

이전 영상에서는 내용을 수정한 파일 중에서 커밋에 반영하고 싶은 파일은 git add를 해야한다고 했습니다. 그런데 사실 이것과 관련해서 꼭 알아야할 사실이 하나 있습니다. 이 사실을 확실히 이해하고 암기해야 앞으로 깃을 사용할 때 어려움이 없습니다. 자, 그럼 설명할게요.

Git은 내부적으로 크게 3가지 종류의 작업 영역을 두고 동작합니다.

각 작업 영역의 이름은

    working directory
    staging area
    repository

입니다. 순서대로 하나씩 설명해드릴게요.

첫 번째 작업 영역인 working directory는 작업을 하는 프로젝트 디렉토리를 말합니다. 그러니까 지금 상황에서는 MathTool 디렉토리가 working directory입니다.

두 번째 작업 영역인 staging area는 git add를 한 파일들이 존재하는 영역입니다. 커밋을 하게되면 staging area에 있는 파일들만 커밋에 반영됩니다.

세 번째 작업 영역인 repository는 working directory의 변경 이력들이 저장되어 있는 영역입니다. 그러니까 커밋들이 저장되는 영역이라는 뜻인데요. 조금 풀어서 설명해볼게요.

    working directory에서 뭔가 작업을 하고,
    작업한 파일들을 git add 해주고,
    커밋을 하면 staging area에 있던 파일들의 모습이 마치 영화의 한 장면, 스냅샷(snapshot)처럼 이 repository에 저장되는 겁니다.

그리고 '02. repository 만들기' 영상에서 본 것처럼 실제로는 MathTool 디렉토리 안에 숨겨져 있던 .git 디렉토리가 repository입니다.

3가지 작업 영역이 잘 이해되시나요? 좀더 잘 이해하기 위해 다음 그림을 봅시다.

왼쪽부터 순서대로 working directory, staging area, repository가 있습니다. 다음과 같은 작업을 한 상태를 나타내는 그림인데요.

    working directory에서 A.txt 파일과 B.txt 파일을 작성하고 
    git add A.txt와 git add B.txt를 실행해서 A.txt, B.txt 둘다 staging area에 올렸습니다.
    그 다음 git commit -m "Ver_1"를 실행해서 staging area에 있는 파일들을 가져와 커밋으로 남겼습니다. 

Git에서 커밋을 할 때 어떤 식으로 일이 진행되는 건지 좀 이해되시죠?

자, 작업을 좀더 해볼까요?

이전 그림에서 작업을 좀더 하고 나서의 모습인데요. 다음과 같은 작업을 추가적으로 했습니다.

    working directory에서 A.txt 파일 내용에 Python~이라는 단어를 추가, B.txt 파일 내용에 Morning!이라는 단어를 추가했습니다. 
    그런데 이번에는 git add B.txt만 실행해서 B.txt 파일만 staging area에 올렸습니다. 
    그 다음 git commit -m "Ver_2"로 두 번째 커밋을 했습니다. 

이전 그림과 다른 점은 A.txt는 staging area에 올리지 않고, B.txt만 staging area에 올렸다는 점입니다. 그랬더니 지금 repository에서 그 결과가 어떤가요? Ver_2 커밋을 보면 지금

    A.txt는 staging area에 있던 모습, 그러니까 수정하기 이전의 모습이 Ver_2 커밋에 반영되었고
    B.txt도 staging area에 있던 모습, 하지만 A.txt와는 달리 수정한 이후의 모습이 Ver_2 커밋에 반영되었습니다.

A.txt, B.txt 둘다 working directory에서 수정했다는 사실은 같지만, staging area에 올렸는지 여부에 따라 그 최신 모습이 커밋에 반영되는지가 달라지는 겁니다. 바로 이 점이 Git을 사용할 때 잘 알고 기억해야하는 부분입니다.

그런데 staging area가 굳이 왜 필요할까요? working directory에서 작업을 하고 git add할 필요없이 바로 커밋해버리는 구조가 더 편할 것 같은데 말이죠. 하지만 꼭 그렇지는 않습니다. 방금처럼 A.txt와 B.txt 파일을 둘다 수정했더라도 두 파일 모두 그 최신 모습을 다음 커밋에 반영하고 싶지 않을 수도 있습니다. 방금처럼 B.txt의 최신 모습만 그 다음 커밋에 반영하고 싶을 수도 있는 거죠. 이런 상황은 실제로 꽤 자주 있습니다. 만약 staging area가 없다면 원하는 것들만 선별적으로 커밋에 반영할 수 없게 됩니다. 그럼 좀더 세밀한 버전 관리를 할 수 없게 되는 거죠. 왜 staging area가 필요한지 알겠죠?

자, 이때까지 Git의 3가지 작업 영역과 그 관계에 대해서 알아봤는데요. 이 부분은 몇 번을 강조해도 지나치지 않을만큼 중요한 핵심 개념입니다. 이 개념을 완벽히 이해해야 나머지 내용을 배우는데 어려움이 없습니다. 꼭 제대로 이해하고 넘어가세요.

참고로 working directory는 working tree라고 하기도 하고, staging area는 index라고 할 때도 있습니다. 혹시 다른 곳에서 working tree, index 이런 단어를 쓰더라도 결국 다 우리가 배운 작업 영역들이니까 당황하지 마세요!

----------------------------------------------------------------------------------------------------------------------------------------------------------

git add 더 자세히 알아보기

먼저 calculator.py 맨 윗줄에 # 계산기 이런 주석을 달아주자 그런다음 파일저장 
License 파일도 열어서 맨 윗줄에 # 라이센스 이렇게 적어주고 저장하자 그리고 터미널로 간다 방금 우리는 파일 두개를 수정했다 그럼 git add를 두번해야한다 하지만 일부러 파일 1개만 git add를 해보자 
calculator.py 만 git add를 해보자 -> git add calculator.py 이러면 calculator.py가 staging area 에 올라간다 이 상태에서 커밋을 한다하면 calculator.py 만 주석이 추가된 버전 
그리고 License 는 이전의 주석이 없는 버전이 커밋에 반영될거다 정말 그렇게 되는지 확인해볼 수 있는데 git status 하고 엔터를 치자
->
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	modified:   calculator.py

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   License

git의 현재 상태가 출력된다 말 그대로 git이 인식하고 있는 프로젝트 디렉토리의 현재 상태를 보여준다 크게 두가지 부분으로 되어있는데 첫번째는 Changes to be committed: 라고 되있는 부분이다 
이 말은 커밋에 반영될 변경사항을 말한다 두번째로는 Changes not staged for commit: 라고 되있는 부분인데 여기서 staged 라는건 git add로 파일을 스테이징 에리어에 추가하는 동작을 말한다 
그러니까 변경사항은 있었지만 git add를 하지 않아서 스테이징 에리어에 추가되지 않은 파일을 말한다 git status 를 보면 calculator.py 는 주석이 추가된 새 모습으로 그리고 License 파일은 이전의 모습으로
커밋에 반영될 거라는걸 확인할 수 있다 이제 License 도 staging area에 추가해보자 -> git add License  그리고 다시 git status 해주자 
->
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	modified:   License
	modified:   calculator.py

이렇게 나온다~

자 이번에는 파일말고 디렉토리를 하나 추가해주자 calculator.py의 코드에 대한 회의 내용을 담을 디렉토리를 하나 추가하겠다 -> mkdir meeting-log
그리고 이 디렉토리로 이동한 다음 day1 과 day2 라는 파일을 만들자 -> touch day1 그리고 touch day2 
그리고 다시 부모 디렉토리로 가자 방금 생성한 meeting-log 디렉토리도 커밋에 반영하고 싶은데 그럼 그냥 git add meeting-log/  이렇게 써주면 된다 (뒤에 /가 붙네)
git status
->
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	modified:   License
	modified:   calculator.py
	new file:   meeting-log/day1
	new file:   meeting-log/day2

방금 처럼 디렉토리를 git add 해주면 그 디렉토리 안에 있는 모든 파일이 스테이징 에리어에 추가된다

git add 애 대해 마지막으로 한가지만 더 해보자 우리가 개발을 하다보면 파일을 여러개 수정하고 커밋해야 되는 경우가 있다 그럼 이럴 때마다 수정한 모든 파일에 대해 git add를 해줘야하는데 좀 불편하다
이럴 때 변경 사항이 있는 모든 파일을 한번에 스테이징 에리어에 추가하는 방법이 있다 한번 해보자 일단 calculator.py와 License 파일의 주석을 조금 수정하자 주석 맨 앞에 기본을 붙인 후 각자 저장한다
git status 
->
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	modified:   License
	modified:   calculator.py
	new file:   meeting-log/day1
	new file:   meeting-log/day2

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   License
	modified:   calculator.py
	
그러면 우리가 수정한 두 파일이 아직 스테이징 에리어에 추가되어 있지 않다고 뜬다 이럴 때 한꺼번에 할 수 있는 꿀팁이 있다 -> git add .
이 git add . 는 프로젝트 디렉토리 내의 변경 사항이 생긴 모든 파일들을 스테이징 에리어에 추가하라는 뜻이다 실행하고 git status 를 해보자 
->
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	modified:   License
	modified:   calculator.py
	new file:   meeting-log/day1
	new file:   meeting-log/day2

자 모두 스테이징 에리어에 올라갔다 커밋해주자 ->  git commit -m "Add title comment and Create meeting-log"
->
[master 1fb3391] Add title comment and Create meeting-log
 4 files changed, 2 insertions(+)
 create mode 100644 MathTool/meeting-log/day1
 create mode 100644 MathTool/meeting-log/day2

잘됬다~
---------------------------------------------------------------------------------------------------------------------------------
08. Git이 보는 파일의 4가지 상태

이전 노트에서 Git의 3가지 작업 영역을 배웠습니다. 

작업 영역과 관련해서 한 가지 더 알아두면 좋은 내용이 있는데요.

그건 바로 Git으로 관리되는 파일은 일종의 '상태(status)'라는 걸 가진다는 사실입니다. 

일단 Git에서 파일들은 크게 다음 2가지 상태를 가집니다.

    Untracked 상태
    Tracked 상태 

그리고 Tracked 상태는 다시 아래와 같은 3가지 상태로 나눌 수 있구요. 

    Staged 상태
    Unmodified 상태
    Modified 상태

각 상태를 순서대로 설명해드릴게요.

1. Untracked 상태

Untracked는 '추적되지 않고 있는'이라는 뜻입니다. 이 상태는 파일이 Git에 의해서 그 변동사항이 전혀 추적되고 있지 않는 상태를 뜻합니다. 예를 들어, 파일을 새로 생성하고 그 파일을 한 번도 git add 해주지 않았다면 이 상태입니다.

2. Tracked 상태

파일이 Git에 의해 그 변동사항이 추적되고 있는 상태입니다. 이 상태는 다시 그 특성에 따라 3가지 상태로 나뉩니다. 하나씩 설명할게요.

(1) Staged 상태

파일의 내용이 수정되고나서, staging area에 올라와있는 상태를 Staged(스테이징된, stage area에 올려진) 상태라고 합니다.

    새로 생성한 파일에 내용을 쓰고 git add를 해주거나

    한 번이라도 커밋에 포함됐었던 파일이라도 내용을 수정하고 git add를 해주면 이 상태입니다.

(2) Unmodified 상태

현재 파일의 내용이 최신 커밋의 모습과 비교했을 때 전혀 바뀐 게 없는 상태면 그 파일은 Unmodified(수정되지 않은, 변한 게 없는) 상태입니다. 커밋을 하고 난 직후에는 working directory 안의 모든 파일들이 이 상태가 됩니다.

(3) Modified 상태

최신 커밋의 모습과 비교했을 때 조금이라도 바뀐 내용이 있는 상태면 그 파일은 Modified(수정된) 상태입니다.

이렇게 Git에서 파일은 매 순간 4가지 상태 중 하나의 상태에 있게 됩니다. 이 내용을 그림으로 정리하면 아래와 같습니다.

어떤 경우에, 어떻게 상태 전환이 발생하는지 주의깊게 살펴보세요. 각 경우를 설명하자면 아래 내용과 같습니다.

    Add the file : Untracked 상태의 파일을 처음으로 git add 해주면 Staged 상태가 됩니다.
    Edit the file : 최신 커밋과 비교했을 때 차이가 없는 Unmodified 상태의 파일의 내용을 수정하면 Modified 상태가 됩니다.
    Stage the file : Modified 상태의 파일을 git add 해주면 Staged 상태가 됩니다. 
    Remove the file : 파일을 삭제하면 당연히 Git에서 더이상 인식하지 않겠죠?
    Commit : 커밋을 하면 staging area에 있던 파일들이 커밋에 반영되고, 이제 모든 파일들은 최신 커밋과 차이가 없게 되니까 Unmodified 상태가 됩니다. 

이전에 본  '05. Git의 3가지 작업 영역' 노트의 내용과 이 노트의 내용을 잘 기억한다면 앞으로 Git을 더 잘 사용할 수 있게 될 겁니다. 
-----------------------------------------------------------------------------------------------------------------------------------------------

git add 취소하기 

calculator.py 에 함수를 하나 추가해보자 

# 기본 계산기
def add(a, b):
  return a+b

def subtract(a, b):
  return a-b

def say_hello():
  print("Hello")
  
이 파일을 저장하고 git add calculator.py 하자 하자 그리고 git status 해보면 
->
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	modified:   calculator.py

이미 staging area 에 추가되어있는 상태이다 근데 다시 생각해보니 say_hello 함수는 수학 계산기에 어울리지 않는 함수이다 아무래도 이 함수는 삭제하고 calculator.py 를 원래 상태로 돌리는 것이 좋다 
그럼 일단 staging area에서 calcualtor.py 를 지워야하는데 이 때 사용 하는 것이 git reset 이다 -> git reset calculator.py 이렇게 해주자 
->
Unstaged changes after reset:
M	MathTool/calculator.py

calculator.py 가 staging area 에서 삭제된것을 확인할 수 있다 Unstaged changes after reset: 이 출력은 reset 으로 staging area에서 제거된 변경 사항이 있다는 의미이다 
-> M	MathTool/calculator.py   여길 보면 calculator.py 가 표시되어있다

git status 를 해보자 
-> 
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   calculator.py

no changes added to commit (use "git add" and/or "git commit -a")

-> 변경 사항이 있지만 staging area에 추가되지 않은 파일인 calculator.py가 있다고 출력된다 staging area에서 제거되었다고 해도 calculator.py는 여젼히 say_hello 함수가 추가된 모습 그대로 
working directory 에 남아있다 이제 say_hello  를 지우고 다시 저장하자 그리고 git status 하면 
->
$ git status
On branch master
nothing to commit, working tree clean

커밋할 것이 없고 working tree (working directory)가 clean 하다고 뜬다 worgkin tree 가 clean 하다는 말은 현재 working directory 가 바로 이전 커밋할 때의 상태와 같다는 의미이다 -> No 변경사항
-----------------------------------------------------------------------------------------------------------------------------------------------

10. 특정 git 커맨드의 사용법을 알고 싶다면?

이때까지 계속 git add, git commit처럼 git으로 시작하는 커맨드를 배우고 있죠? 앞으로도 계속 git으로 시작하는 커맨드들을 배울 겁니다. 

그런데 새롭게 커맨드를 배울 때마다 그 의미나 사용법을 좀더 자세히 알고 싶다면 어떻게 해야할까요?

그럴 때는 git help라는 커맨드를 쓰면 됩니다. 

    git help [알고 싶은 커맨드의 이름]

의 형식으로 쓰면 되는데요. 예를 들어, git add라는 커맨드의 의미와 사용법을 좀더 자세히 알고 싶다고 해봅시다. 

그럴 때는 위 그림처럼 작성하고 엔터를 치면, 아래와 같이 Git의 공식 매뉴얼 중에서 해당 커맨드에 관한 내용이 출력됩니다.

또는

    man git-[알고 싶은 커맨드]

형식으로 입력하고 실행해도 같은 결과가 출력됩니다. 그러니까 이렇게 입력해도

위와 같은 결과가 출력되는 겁니다. 

이렇게 출력되는 공식 메뉴얼에는 해당 git 커맨드에 대한 설명이 아주 자세하게 나와있습니다. 만약 이 공식 메뉴얼 화면에서 나가고 싶으면 영어 단어 quit(나가다)의 줄임말인 q를 입력하면 됩니다.

앞으로 커맨드를 새로 배울 때마다 더 자세하게 알고 싶은 게 있으면 위에서 배운대로 해보세요. 각각의 커맨드에 대해서 자세하게 알게 될수록 Git을 능숙하게 쓸 수 있게 될 겁니다. 모든 커맨드를 다 이렇게 자세히 알아보는 건 힘들겠지만 중요하거나 관심이 가는 커맨드는 이런 공식 메뉴얼을 활용해보세요.

--------------------------------------------------------------------------------------------------------------------------------------------
git status 커맨드를 사용하면 현재 Git이 인식하고 있는 프로젝트의 상태를 보여줍니다. Git을 사용하다가 앞으로 어떻게 해야할지 모를 때는 이 커맨드를 실행해보세요. 그때 출력되는 결과에서 힌트를 얻을 수 있을 겁니다.

--------------------------------------------------------------------------------------------------------------------------------------------------

