Git
* 코드 버전 관리를 할 수 있는 프로그램
* Git은 아주 편리한 방식으로 각 버전마다 확실하게 구별되도록 버전 관리를 해준다 (버전 관리)
* 매전 작성했던 코드의 모습을 하나의 버전으로 저장할 수 있게 해준다 ( original(SNS 1차 완성), ver1(로그인 기능 수정), ver2(댓글 기능 추가)...)
* 버전 관리 뿐만 아니라 여러 개발자들이 협업을 할 수 있게 해준다 (동시 협업)
* 개발할 때는 보통 프로그램을 기능별로 나누고 각 기능을 여러 개발자가 나눠서 개발을 한다. git을 이용하면 여러 개발자가 동시에 작성한 코드를 합칠 수 있다.

버전 관리의 필요성
* 예를 들어 과제를 하다보면 발표자료 파일을 계속 업데이트 하게 된다. 이 때, 이전 최종버전을 복사해서 다시 최종버전을 만드는 작업을 반복하다 보면 수 많은 버전의 발표자료가 생기게 된다
* 이 때 파일의 어떤 버전이 수정됬는지 알 수 없고 중간 내용을 보고 싶어도 어떤 내용을 봐야 하는지 헷갈린다 결국 하나하나 다 열어보게 된다
* 이런 일들을 방지하기 위해 버전관리를 해야한다

버전 관리란?
* 버전관리란 파일의 변화를 시간에 따라서 기록했다가 나중에 특정 시점의 버전을 다시 꺼내올 수 있는 시스템

버전 관리 장점
* 과제의 진짜 최종본을 만들 때 까지 어떤 과정을 거쳤는지 확인 가능
* 어딘가 잘못된 부분이 생기면 이전 버전으로 돌아갈 수 있음

버전 관리를 하지 않는다면?
* 하나의 프로젝트를 계속 수정한다면 문제가 생겼을 때 이전 버전으로 돌아갈 수 없다. 반면, 버전 관리를 한다면 그냥 이전 버전으로 돌아가면 된다


Git의 역사

깃은 누가 만들었을까요? 바로 리누스 토발즈(Linus Torvalds)라는 사람이 만들었습니다. 

리누스 토발즈는 리눅스(Linux)라고 하는 운영 체제를 만든 사람인데요.

혹시 운영 체제가 뭔지, 리눅스가 뭔지 모르는 분은 코드잇의 다음 레슨들을 참고하세요.

운영 체제 : https://www.codeit.kr/learn/courses/intro-to-computer/2600
리눅스 : https://www.codeit.kr/learn/courses/unix-command-line/2668
리누스 토발즈는 리눅스를 만든 이후에 BitKeeper라고 하는 툴(Tool)로 리눅스의 각 버전들(ver1, ver2, ver3 ...)을 관리하고 있었습니다.

그런데 리눅스 커뮤니티의 개발자 한 명이 BitKeeper의 내부 동작 원리를 분석하려고 했던 일을 계기로 리눅스 커뮤니티와 BitKeeper 측의 사이가 틀어지게 되었습니다. 이때문에 리눅스 커뮤니티 측에 대해서 BitKeeper는 유료화되었고, 리누스 토발즈는 BitKeeper를 대신할 다른 버전 관리 시스템을 찾아보기 시작했죠. 하지만 자신의 마음에 드는 버전 관리 툴을 찾지 못했고, 그래서 리누스 토발즈는 본인이 직접 버전 관리 프로그램을 만들어버렸습니다. 정말 대단한 사람이죠? 이렇게 만들어진 버전 관리 프로그램이 바로 깃입니다.

깃은 당시에 아래와 같은 목표를 갖고 설계 및 제작되었는데요.

빠른 속도 
단순한 디자인
비선형적 개발 지원(수천 개의 브랜치를 병행할 수 있음, 브랜치가 뭔지는 나중 챕터에서 배웁니다.)
완전 분산형 시스템  
리눅스와 같은 거대한 프로젝트도 속도 저하의 문제없이 관리할 수 있는 시스템
깃은 버전 관리(Version Control), 협업(Cooperation)에 필요한 여러 요소들이 고려되었기 때문에, 사용성이 굉장히 좋은 프로그램이 될 수 있었습니다. 

그럼 왜 깃(git)이라는 이름이 붙었을까요? 리누스 토발즈가 깃을 맨 처음 만들었을 때 남겼던 기록을 보면 힌트를 얻을 수 있는데요. 그 기록은 아래 그림과 같습니다. 



위 그림의 내용을 간단히 번역하면 다음과 같습니다. 

"깃은 당신의 마음에 따라 그 어떤 것으로도 해석될 수 있습니다. 

1. 유닉스 커맨드에서 사용되는 명령어 이름을 제외한 랜덤한 알파벳 3글자의 조합

2. 멍청하고 단순한(이런 특성을 지닌 아무 단어로 해석되어도 좋다는 의미)

3. global information tracker의 약자

4. goddamn idiotic truckload of sh*t 이라는 욕설의 약자"

이렇게 깃이라는 이름은 처음 만들어질 때부터 다양한 의미로 해석될 가능성을 갖고 탄생했습니다. 뭔가 리누스 토발즈의 독특함이 느껴지는 부분인데요. 혹시 이 기록을 직접 살펴보고 싶으신 분은 이 링크를 클릭해보세요. 


Got의 기능들
* 버전 관리
* 동시 협업
* 다른 컴퓨터에 작업물 보내기 -> 작업물을 다른 컴퓨터에 보낸다는 것은 작업물의 백업본을 만드는 것이다 -> 내 컴퓨터의 작업물에 문제가 생겼을 시 외부 컴퓨터에 보내진 작업물로 다시 복구 시킬 수 있다
-> 이 때 외부 컴퓨터는 누가 준비하나? -> 귀찮다 -> 대신 해주는 서비스 -> Github
* 다른 컴퓨터에 작업물 보내면 다른 사람과 협업하기 쉬워진다는 장점이 있다

Github 
* 외부 컴퓨터를 무료로 제공해주고 사용할 수 있도록 해준다 (원격 저장소)
* 작업한 내용을 자신의 컴퓨터가 아닌 다른 곳에서 저장할 수 있다

git vs Github
* git은 버전 관리 프로그램, Github은 git으로 관리하는 프로그램을 올려둘 수 있는 사이트
